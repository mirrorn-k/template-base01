services:
  frontend:
    ports:
      - "${PORT:-8260}:3000"
    build:
      context: ./frontend
      dockerfile: ../Dockerfile
    working_dir: /app
    env_file:
      - ${ENV_FILE:-./env/prod.env}
    command: sh -c "npm run build && npm run start"
    volumes:
      # ソースコードはホストと同期
      - ./frontend:/app
      # node_modules はコンテナ専用（ホストに上書きされないようにする）
      #- /app/node_modules
    environment:
      NODE_ENV: production

  kimotokk.com:
    ports:
      - "${PORT:-8261}:3000"
    build:
      context: ./frontend
      dockerfile: ../Dockerfile
    working_dir: /app
    env_file:
      - ${ENV_FILE:-./env/kimotokk.com.env}
    command: sh -c "npm run build && npm run start"
    volumes:
      # ソースコードはホストと同期
      - ./frontend:/app
      # node_modules はコンテナ専用（ホストに上書きされないようにする）
      #- /app/node_modules
    environment:
      NODE_ENV: production

  three-good.co.jp:
    ports:
      - "${PORT:-8261}:3000"
    build:
      context: ./frontend
      dockerfile: ../Dockerfile
    working_dir: /app
    env_file:
      - ${ENV_FILE:-./env/three-good.co.jp.env}
    command: sh -c "npm run build && npm run start"
    volumes:
      # ソースコードはホストと同期
      - ./frontend:/app
      # node_modules はコンテナ専用（ホストに上書きされないようにする）
      #- /app/node_modules
    environment:
      NODE_ENV: production
